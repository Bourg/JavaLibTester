Show all data defined in the ExamplesRangeCheck class:


---------------------------------------------------
Invoke tester.runReport(this, true, true):
Print all data, all test results
Tester Prima v.1.4.1 - 5 October 2010
----------------------------------
rangeCheck.ExamplesRangeCheck:
---------------

 new rangeCheck.ExamplesRangeCheck:1(
  this.jon20 = 
   new rangeCheck.Person:2(
    this.name =  "Jon"
    this.age = 20)
  this.ann10 = 
   new rangeCheck.Person:3(
    this.name =  "Ann"
    this.age = 10)
  this.ken40 = 
   new rangeCheck.Person:4(
    this.name =  "Ken"
    this.age = 40)
  this.dan40 = 
   new rangeCheck.Person:5(
    this.name =  "Dan"
    this.age = 40)
  this.kim30 = 
   new rangeCheck.Person:6(
    this.name =  "Kim"
    this.age = 30)
  this.pat60 = 
   new rangeCheck.Person:7(
    this.name =  "Pat"
    this.age = 60))
---------------

Ran 98 tests.
52 tests failed.

Full test results: 
-------------------

Success in the range test number 1
Success: int: [3 <= 3 < 5)
actual:   3
low:      3
high:     5

Success in the range test number 2
Success: int: [2 <= 4 < 5)
actual:   4
low:      2
high:     5

Success in the range test number 3
Success: int: (3 < 5 <= 5]
actual:   5
low:      3
high:     5

Error in range test number 4
Should fail: int: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:71)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3
low:       3
high:      5

Error in range test number 5
Should fail: int: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:72)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2
low:       3
high:      5

Error in range test number 6
Should fail: int: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:73)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5
low:       3
high:      5

Error in range test number 7
Should fail: int: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:74)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8
low:       3
high:      5

Success in the range test number 8
Success: short: [3 <= 3 < 5)
actual:   3S
low:      3S
high:     5S

Success in the range test number 9
Success: short: [3 <= 4 < 5)
actual:   4S
low:      3S
high:     5S

Success in the range test number 10
Success: short: (3 < 5 <= 5]
actual:   5S
low:      3S
high:     5S

Error in range test number 11
Should fail: short: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:87)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3S
low:       3S
high:      5S

Error in range test number 12
Should fail: short: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:88)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2S
low:       3S
high:      5S

Error in range test number 13
Should fail: short: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:89)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5S
low:       3S
high:      5S

Error in range test number 14
Should fail: short: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:90)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8S
low:       3S
high:      5S

Success in the range test number 15
Success: long: [3 <= 3 < 5)
actual:   3L
low:      3L
high:     5L

Success in the range test number 16
Success: long: [3 <= 4 < 5)
actual:   4L
low:      3L
high:     5L

Success in the range test number 17
Success: long: (3 < 5 <= 5]
actual:   5L
low:      3L
high:     5L

Error in range test number 18
Should fail: long: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:103)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3L
low:       3L
high:      5L

Error in range test number 19
Should fail: long: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:104)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2L
low:       3L
high:      5L

Error in range test number 20
Should fail: long: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:105)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5L
low:       3L
high:      5L

Error in range test number 21
Should fail: long: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:106)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8L
low:       3L
high:      5L

Success in the range test number 22
Success: byte: [3 <= 3 < 5)
actual:   3
low:      3
high:     5

Success in the range test number 23
Success: byte: [3 <= 4 < 5)
actual:   4
low:      3
high:     5

Success in the range test number 24
Success: byte: (3 < 5 <= 5]
actual:   5
low:      3
high:     5

Error in range test number 25
Should fail: byte: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:119)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3
low:       3
high:      5

Error in range test number 26
Should fail: byte: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:120)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2
low:       3
high:      5

Error in range test number 27
Should fail: byte: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:121)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5
low:       3
high:      5

Error in range test number 28
Should fail: byte: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:122)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8
low:       3
high:      5

Success in the range test number 29
Success: boolean: [false <= false < true)
actual:   false
low:      false
high:     true

Error in range test number 30
Should fail: boolean: [false <= true < true)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:130)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    true
low:       false
high:      true

Success in the range test number 31
Success: char: [p <= p < r)
actual:   p
low:      p
high:     r

Success in the range test number 32
Sucess: char: [p <= q < r)
actual:   q
low:      p
high:     r

Error in range test number 33
Should fail: char: [p <= m < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:144)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    m
low:       p
high:      r

Error in range test number 34
Should fail: char: [p <= r < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:145)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    r
low:       p
high:      r

Error in range test number 35
Should fail: char: [p <= s < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:146)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    s
low:       p
high:      r

Success in the range test number 36
Success: float: [3.0 <= 3.0 < 5.0)
actual:   3.0F
low:      3.0F
high:     5.0F

Success in the range test number 37
Success: float: [3.0 <= 4.0 < 5.0)
actual:   4.0F
low:      3.0F
high:     5.0F

Success in the range test number 38
Success: float: (3.0 < 5.0 <= 5.0]
actual:   5.0F
low:      3.0F
high:     5.0F

Error in range test number 39
Should fail: float: (3.0 < 3.0 <= 5.0]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:159)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3.0F
low:       3.0F
high:      5.0F

Error in range test number 40
Should fail: float: [3.0 <= -2.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:160)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2.0F
low:       3.0F
high:      5.0F

Error in range test number 41
Should fail: float: [3.0 <= 5.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:161)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5.0F
low:       3.0F
high:      5.0F

Error in range test number 42
Should fail: float: [3.0 <= 8.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:162)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8.0F
low:       3.0F
high:      5.0F

Success in the range test number 43
Success: double: [3.0 <= 3.0 < 5.0)
actual:   3.0
low:      3.0
high:     5.0

Success in the range test number 44
Success: double: [3.0 <= 4.0 < 5.0)
actual:   4.0
low:      3.0
high:     5.0

Success in the range test number 45
Success: double: (3.0 < 5.0 <= 5.0]
actual:   5.0
low:      3.0
high:     5.0

Error in range test number 46
Should fail: double: (3.0 < 3.0 <= 5.0]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:175)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    3.0
low:       3.0
high:      5.0

Error in range test number 47
Should fail: double: [3.0 <= -2.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:176)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    -2.0
low:       3.0
high:      5.0

Error in range test number 48
Should fail: double: [3.0 <= 5.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:177)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    5.0
low:       3.0
high:      5.0

Error in range test number 49
Should fail double: [3.0 <= 8.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:178)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    8.0
low:       3.0
high:      5.0

Success in the range test number 50
Success: String: [abc <= abc < cde)
actual:    "abc"
low:       "abc"
high:      "cde"

Success in the range test number 51
Success: String: [abc <= bcd < cde)
actual:    "bcd"
low:       "abc"
high:      "cde"

Error in range test number 52
Should fail: String: [abc <= aaa < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:192)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:     "aaa"
low:        "abc"
high:       "cde"

Error in range test number 53
Should fail: String: [abc <= cde < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:193)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:     "cde"
low:        "abc"
high:       "cde"

Error in range test number 54
Should fail: String: [abc <= def < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:194)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:     "def"
low:        "abc"
high:       "cde"

Success in the range test number 55
Success: Num range: [1 <= 1.0 < 2.0)
actual:   1.0
low:      1
high:     2.0

Success in the range test number 56
Success: Num range: [1.0 <= 1 < 2.0)
actual:   1
low:      1.0
high:     2.0

Success in the range test number 57
Success: Num range: [1 <= 1 < 2.0)
actual:   1
low:      1
high:     2.0

Success in the range test number 58
Success: Num range: [1.0 <= 1.0 < 2.0)
actual:   1.0
low:      1.0
high:     2.0

Success in the range test number 59
Success: Num range: (1.0 < 2 <= 2.0]
actual:   2
low:      1.0
high:     2.0

Success in the range test number 60
Success: Num range: [(long) 1 <= 1.0 < 2.0)
actual:   1.0
low:      1L
high:     2.0

Success in the range test number 61
Success: Num range: [(short) 1 <= 1.0 < 2.0)
actual:   1.0
low:      1S
high:     2.0

Success in the range test number 62
Success: Num range: [new Float (1.0) <= 1.0 < 2.0)
actual:   1.0
low:      1.0F
high:     2.0

Error in range test number 63
Should fail: Num range: [1.0 <= 2 < 2.0]
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:216)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    2
low:       1.0
high:      2.0

Error in range test number 64
Should fail: Num range: [2.0 <= 1 < 3.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:217)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    1
low:       2.0
high:      3.0

Error in range test number 65
Should fail: Num range: [2.0 <= 4.0 < 3.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:218)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    4.0
low:       2.0
high:      3.0

Success in the range test number 66
Success: Num range: [10^1 <= 10^1 + 3 < 10^1 + 4)
actual:   13BigInteger
low:      10BigInteger
high:     14BigInteger

Error in range test number 67
Success: Num range (***to be fixed!***): [10^1000 <= 10^1000 + 3 < 10^1000 + 4)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:237)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigInteger
lowigInteger
highigInteger

Success in the range test number 68
Success: Num range: [10^1 <= 10^1 + 0.3 < 10^1 + 0.4)
actual:   10.3BigDecimal
low:      10BigDecimal
high:     10.4BigDecimal

Error in range test number 69
Success: Num range (***to be fixed!***): [10^1000 <= 10^1000 + 0.3 < 10^1000 + 0.4)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:257)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigDecimal
lowigDecimal
highigDecimal

Success in the range test number 70
Success: BigInteger: [10^1000 + 3 <= 10^1000 + 3 < 10^1000 + 5)
actualigInteger
lowigInteger
highigInteger

Success in the range test number 71
Success: BigInteger: [10^1000 + 3 <= 10^1000 + 4 < 10^1000 + 5)
actual:   10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004BigInteger
lowigInteger
high:     10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005BigInteger

Success in the range test number 72
Success: BigInteger: (10^1000 + 2 < 10^1000 + 5 <= 10^1000 + 5]
actualigInteger
lowigInteger
high:     10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005BigInteger

Error in range test number 73
Should fail: BigInteger: (10^1000 + 3 < 10^1000 + 3 <= 10^1000 + 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:285)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigInteger
lowigInteger
highigInteger

Error in range test number 74
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 - 2 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:287)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigInteger
lowigInteger
highigInteger

Error in range test number 75
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 + 5 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:289)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigInteger
lowigInteger
highigInteger

Error in range test number 76
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 + 8 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:291)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigInteger
lowigInteger
highigInteger

Success in the range test number 77
Success: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.3 < 10^1000 + 0.5)
actualigDecimal
lowigDecimal
highigDecimal

Success in the range test number 78
Success: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.4 < 10^1000 + 0.5)
actual:   10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.4BigDecimal
lowigDecimal
highigDecimal

Success in the range test number 79
Success: BigDecimal: (10^1000 + 0.2 < 10^1000 + 0.5 <= 10^1000 + 0.5]
actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 80
Should fail: BigDecimal: (10^1000 + 0.3 < 10^1000 + 0.3 <= 10^1000 + 0.5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:310)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 81
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 - 0.2 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:312)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 82
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.5 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:314)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 83
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.8 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:316)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actualigDecimal
lowigDecimal
highigDecimal

Success in the range test number 84
Success: RangeComparable: hits the lower bound
actual:   
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 85
Success: RangeComparable: within the bounds
actual:   
 new rangeCheck.Person:1(
  this.name =  "Kim"
  this.age = 30)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 86
Success: RangeComparable: incl upper bound
actual:   
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 87
Should fail: RangeComparable: below the lower bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:344)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Ann"
  this.age = 10)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 88
Should fail: RangeComparable: hits the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:346)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 89
Should fail: RangeComparable: excl lower bound
Actual value is not within the (low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:348)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 90
Should fail: RangeComparable: over the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:350)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Pat"
  this.age = 60)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 91
Success: RangeComparator: hits the lower bound
actual:   
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 92
Success: RangeComparator: within the bounds
actual:   
 new rangeCheck.Person:1(
  this.name =  "Kim"
  this.age = 30)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 93
Success: RangeComparator: incl upper bound
actual:   
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:      
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:     
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 94
Should fail: RangeComparator: below the lower bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:371)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Ann"
  this.age = 10)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 95
Should fail: RangeComparator: excl lower bound
Actual value is not within the (low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:373)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 96
Should fail: RangeComparator: hits upper the bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:375)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 97
Should fail: RangeComparator: over the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:377)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:412)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Pat"
  this.age = 60)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Success in the range test number 98
Hamlet between Cosmos and Pearl
actual:   
 new rangeCheck.Book:1(
  this.title =  "Hamlet"
  this.author = null
  this.year = 1600)
low:      
 new rangeCheck.Book:1(
  this.title =  "Cosmos"
  this.author = null
  this.year = 1960)
high:     
 new rangeCheck.Book:1(
  this.title =  "Pearl"
  this.author = null
  this.year = 1930)

--- END OF FULL TEST RESULTS ---

---------------------------------------------------

---------------------------------------------------

---------------------------------------------------
Invoke tester.runReport(this, false, false, true):
Print no data, all test results, no warnings
Tester Prima v.1.4.1 - 5 October 2010
----------------------------------

Ran 98 tests.
52 tests failed.

Failed test results: 
--------------

Error in range test number 4
Should fail: int: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:71)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3
low:       3
high:      5

Error in range test number 5
Should fail: int: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:72)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2
low:       3
high:      5

Error in range test number 6
Should fail: int: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:73)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5
low:       3
high:      5

Error in range test number 7
Should fail: int: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:74)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8
low:       3
high:      5

Error in range test number 11
Should fail: short: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:87)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3S
low:       3S
high:      5S

Error in range test number 12
Should fail: short: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:88)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2S
low:       3S
high:      5S

Error in range test number 13
Should fail: short: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:89)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5S
low:       3S
high:      5S

Error in range test number 14
Should fail: short: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:90)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8S
low:       3S
high:      5S

Error in range test number 18
Should fail: long: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:103)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3L
low:       3L
high:      5L

Error in range test number 19
Should fail: long: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:104)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2L
low:       3L
high:      5L

Error in range test number 20
Should fail: long: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:105)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5L
low:       3L
high:      5L

Error in range test number 21
Should fail: long: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:106)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8L
low:       3L
high:      5L

Error in range test number 25
Should fail: byte: (3 < 3 <= 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:119)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3
low:       3
high:      5

Error in range test number 26
Should fail: byte: [3 <= -2 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:120)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2
low:       3
high:      5

Error in range test number 27
Should fail: byte: [3 <= 5 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:121)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5
low:       3
high:      5

Error in range test number 28
Should fail: byte: [3 <= 8 < 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:122)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8
low:       3
high:      5

Error in range test number 30
Should fail: boolean: [false <= true < true)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:130)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    true
low:       false
high:      true

Error in range test number 33
Should fail: char: [p <= m < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:144)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    m
low:       p
high:      r

Error in range test number 34
Should fail: char: [p <= r < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:145)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    r
low:       p
high:      r

Error in range test number 35
Should fail: char: [p <= s < r)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:146)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    s
low:       p
high:      r

Error in range test number 39
Should fail: float: (3.0 < 3.0 <= 5.0]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:159)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3.0F
low:       3.0F
high:      5.0F

Error in range test number 40
Should fail: float: [3.0 <= -2.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:160)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2.0F
low:       3.0F
high:      5.0F

Error in range test number 41
Should fail: float: [3.0 <= 5.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:161)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5.0F
low:       3.0F
high:      5.0F

Error in range test number 42
Should fail: float: [3.0 <= 8.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:162)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8.0F
low:       3.0F
high:      5.0F

Error in range test number 46
Should fail: double: (3.0 < 3.0 <= 5.0]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:175)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    3.0
low:       3.0
high:      5.0

Error in range test number 47
Should fail: double: [3.0 <= -2.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:176)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    -2.0
low:       3.0
high:      5.0

Error in range test number 48
Should fail: double: [3.0 <= 5.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:177)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    5.0
low:       3.0
high:      5.0

Error in range test number 49
Should fail double: [3.0 <= 8.0 < 5.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:178)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    8.0
low:       3.0
high:      5.0

Error in range test number 52
Should fail: String: [abc <= aaa < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:192)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:     "aaa"
low:        "abc"
high:       "cde"

Error in range test number 53
Should fail: String: [abc <= cde < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:193)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:     "cde"
low:        "abc"
high:       "cde"

Error in range test number 54
Should fail: String: [abc <= def < cde)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testPrimitiveRange(ExamplesRangeCheck.java:194)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:     "def"
low:        "abc"
high:       "cde"

Error in range test number 63
Should fail: Num range: [1.0 <= 2 < 2.0]
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:216)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    2
low:       1.0
high:      2.0

Error in range test number 64
Should fail: Num range: [2.0 <= 1 < 3.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:217)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    1
low:       2.0
high:      3.0

Error in range test number 65
Should fail: Num range: [2.0 <= 4.0 < 3.0)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:218)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    4.0
low:       2.0
high:      3.0

Error in range test number 67
Success: Num range (***to be fixed!***): [10^1000 <= 10^1000 + 3 < 10^1000 + 4)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:237)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigInteger
lowigInteger
highigInteger

Error in range test number 69
Success: Num range (***to be fixed!***): [10^1000 <= 10^1000 + 0.3 < 10^1000 + 0.4)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testNumRange(ExamplesRangeCheck.java:257)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.3BigDecimal
lowigDecimal
highigDecimal

Error in range test number 73
Should fail: BigInteger: (10^1000 + 3 < 10^1000 + 3 <= 10^1000 + 5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:285)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigInteger
lowigInteger
highigInteger

Error in range test number 74
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 - 2 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:287)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigInteger
lowigInteger
highigInteger

Error in range test number 75
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 + 5 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:289)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigInteger
lowigInteger
highigInteger

Error in range test number 76
Should fail: BigInteger: [10^1000 + 3 <= 10^1000 + 8 < 10^1000 + 5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:291)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigInteger
lowigInteger
highigInteger

Error in range test number 80
Should fail: BigDecimal: (10^1000 + 0.3 < 10^1000 + 0.3 <= 10^1000 + 0.5]
Actual value is not within the (low high] range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:310)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.3BigDecimal
lowigDecimal
highigDecimal

Error in range test number 81
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 - 0.2 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:312)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.8BigDecimal
lowigDecimal
highigDecimal

Error in range test number 82
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.5 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:314)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 83
Should fail: BigDecimal: [10^1000 + 0.3 <= 10^1000 + 0.8 < 10^1000 + 0.5)
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testBigNumbersRange(ExamplesRangeCheck.java:316)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actualigDecimal
lowigDecimal
highigDecimal

Error in range test number 87
Should fail: RangeComparable: below the lower bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:344)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Ann"
  this.age = 10)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 88
Should fail: RangeComparable: hits the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:346)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 89
Should fail: RangeComparable: excl lower bound
Actual value is not within the (low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:348)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 90
Should fail: RangeComparable: over the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparable(ExamplesRangeCheck.java:350)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Pat"
  this.age = 60)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 94
Should fail: RangeComparator: below the lower bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:371)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Ann"
  this.age = 10)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 95
Should fail: RangeComparator: excl lower bound
Actual value is not within the (low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:373)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 96
Should fail: RangeComparator: hits upper the bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:375)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Dan"
  this.age = 40)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

Error in range test number 97
Should fail: RangeComparator: over the upper bound
Actual value is not within the [low high) range.
tester.ErrorReport: Error trace:
	at rangeCheck.ExamplesRangeCheck.testRangeComparator(ExamplesRangeCheck.java:377)
	at rangeCheck.ExamplesRangeCheck.main(ExamplesRangeCheck.java:420)

actual:    
 new rangeCheck.Person:1(
  this.name =  "Pat"
  this.age = 60)
low:       
 new rangeCheck.Person:1(
  this.name =  "Jon"
  this.age = 20)
high:      
 new rangeCheck.Person:1(
  this.name =  "Ken"
  this.age = 40)

--- END OF TEST RESULTS ---
