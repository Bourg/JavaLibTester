package traversals;

import tester.Traversal;

/**
 * A class to represent a list dataset of objects of the type <code>T</code>
 * generated by the <CODE>{@link Traversal Traversal} T</CODE>
 */
public interface AListTr<T> extends Traversal<T> {

	/**
	 * Produce true if this <CODE>{@link Traversal Traversal}</CODE>
	 * represents an empty dataset
	 *
	 * @return true if the dataset is empty
	 */
	public boolean isEmpty();

	/**
	 * <P>Produce the first element in the dataset represented by this
	 * <CODE>{@link Traversal Traversal}</CODE> </P>
	 * <P>Throws <code>UnsupportedOperationException</code>
	 * if the dataset is empty.</P>
	 *
	 * @return the first element in this dataset
	 */
	public T getFirst();

	/**
	 * <P>Produce a <CODE>{@link Traversal Traversal}</CODE>
	 * for the rest of the dataset </P>
	 * <P>Throws <code>UnsupportedOperationException</code>
	 * if the dataset is empty.</P>
	 *
	 * @return the <CODE>{@link Traversal Traversal}</CODE> for
	 *         the rest of this dataset
	 */
	public Traversal<T> getRest();

	/**
	 * Does this list contain the given object?
	 *
	 * @param that the given object
	 * @return true if the list contains the given object
	 */
	public boolean contains(T that);
}