package traversals;

import tester.Inspector;
import tester.Traversal;

/**
 * A class to represent a nonempty list dataset of objects
 * of the type <code>T</code> generated by the
 * <CODE>{@link Traversal Traversal} T</CODE>
 */
public class ConsListTr<T> implements AListTr<T> {

	/**
	 * The first object in this list
	 */
	public T first;
	/**
	 * The rest of this list
	 */
	public AListTr<T> rest;

	/**
	 * Constructor
	 * 
	 * @param first The first object in this list
	 * @param rest The rest of this list
	 */
	public ConsListTr(T first, AListTr<T> rest) {
		this.first = first;
		this.rest = rest;
	}

	/**
	 * Produce true if this <CODE>{@link Traversal Traversal}</CODE>
	 * represents an empty dataset
	 *
	 * @return false as this is not an empty dataset
	 */
	public boolean isEmpty() {
		return false;
	}

	/**
	 * <P>Produce the first element in the dataset represented by this
	 * <CODE>{@link Traversal Traversal}</CODE> </P>
	 *
	 * @return the first element in this dataset
	 */
	public T getFirst() {
		return this.first;
	}

	/**
	 * <P>Produce a <CODE>{@link Traversal Traversal}</CODE>
	 * for the rest of the dataset </P>
	 *
	 * @return the <CODE>{@link Traversal Traversal}</CODE> for
	 *         the rest of this dataset
	 */
	public Traversal<T> getRest() {
		return this.rest;
	}

	/**
	 * Does this list contain the given object?
	 *
	 * @param that the given object
	 * @return true if the list contains the given object
	 */
	public boolean contains(T that) {
		
		Inspector insp = new Inspector();
		if (insp.isSame(this.first, that))
			return true;
		else
			return this.rest.contains(that);
	}
}